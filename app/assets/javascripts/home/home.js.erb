/*global angular*/
/*global $*/

angular.module('ErikGibbons.Home', [
  'ui.router',
  'templates',
  'ngMaterial',
  'ngMdIcons',
  'ui.bootstrap',
  'ngSanitize',
  'ngParallax'
])

.config(['$stateProvider', function($stateProvider){
  $stateProvider
    .state('erikgibbons.home', {
      url: '/',
      views: {
        'main@': { // target the 'main' ng-view directive
          controller:  'HomeCtrl as homeCtrl',
          templateUrl: 'home/home.tmpl.html'
        }
      }
    })
  }
])

.controller('HomeCtrl', ['$q', '$http', '$window', '$log', '$location', '$state', '$filter', '$timeout', function($q, $http, $window, $log, $location, $state, $filter, $timeout, $document){
  var homeCtrl = this;
  homeCtrl.setArrays = setArrays;
  homeCtrl.selectAll = selectAll;
  homeCtrl.gambarizeSetup = gambarizeSetup;
  homeCtrl.gambarizeReload = gambarizeReload;
  homeCtrl.allSkillsSelected = true;
  homeCtrl.galleryIndex = 0;
  homeCtrl.toggleSkill = toggleSkill;
  homeCtrl.projects = [
    {'name':'IPR Dominator', 'skills':['html', 'css', 'api', 'async', 'ror', 'js', 'jq', 'sql', 'io', 'alerts', 'stack', 'solr', 'charts', 'regex'], 'images':[{url:"<%= image_url('placeholder.png') %>"}], 'url':'x'},
    {'name':'Strain PLLC Time and Billing', 'skills':['html', 'css', 'async', 'ror', 'js', 'jq', 'sql', 'charts', 'io', 'stack', 'regex'], 'images':[{url:"<%= image_url('luca-bravo-2.jpg') %>"}], 'url':'x'},
    {'name':'iMessage Port', 'skills':['html', 'css', 'ror', 'sql', 'cron', 'io', 'alerts', 'stack', 'regex'], 'images':[{url:"<%= image_url('placeholder.png') %>"}], 'url':'x'},
    {'name':'Personal Movie Database', 'skills':['html', 'css', 'ror', 'api', 'js', 'jq', 'sql', 'angular', 'io', 'stack', 'regex'], 'images':[{url:"<%= image_url('placeholder.png') %>"}], 'url':'x'},
    {'name':'Stock Screener', 'skills':['html', 'css', 'stack', 'sql', 'async', 'ror', 'js', 'jq', 'io', 'regex'], 'images':[{url:"<%= image_url('placeholder.png') %>"}], 'url':'x'},
    {'name':'RosterMod', 'skills':['html', 'css', 'stack', 'sql', 'ror', 'api', 'async', 'js', 'jq', 'angular', 'charts', 'regex'], 'images':[{url:"<%= image_url('placeholder.png') %>"}], 'url':'x'},
    {'name':'Team Schedule API', 'skills':['html', 'css', 'stack', 'sql', 'ror', 'api', 'regex'], 'images':[{url:"<%= image_url('placeholder.png') %>"}], 'url':'x'},
    {'name':'Grill Monitoring', 'skills':['html', 'css', 'stack', 'sql', 'ror', 'api', 'regex', 'js', 'jq', 'charts'], 'images':[{url:"<%= image_url('placeholder.png') %>"}], 'url':'x'},
    {'name':'Flight Check-In', 'skills':['html', 'css', 'stack', 'sql', 'ror', 'api', 'async', 'regex'], 'images':[{url:"<%= image_url('placeholder.png') %>"}], 'url':'x'},
    {'name':'Patent Search', 'skills':['html', 'css', 'stack', 'sql', 'ror', 'api', 'solr'], 'images':[{url:"<%= image_url('placeholder.png') %>"}], 'url':'x'},
    {'name':'Oystermom', 'skills':['html', 'css', 'stack', 'sql', 'ror', 'js', 'jq'], 'images':[{url:"<%= image_url('placeholder.png') %>"}], 'url':'x'},
    {'name':'Streak Automator', 'skills':['html', 'css', 'ror', 'js', 'phantom', 'regex', 'api'], 'images':[{url:"<%= image_url('placeholder.png') %>"}], 'url':'x'}
  ];
  homeCtrl.skills = [
    {'full':'HTML', 'short':'html','show':true},
    {'full':'CSS', 'short':'css','show':true},
    {'full':'Web Scraping and APIs', 'short':'api','show':true},
    {'full':'Multithreaded Asynchronous Jobs', 'short':'async','show':true},
    {'full':'Ruby on Rails', 'short':'ror','show':true},
    {'full':'Javascript', 'short':'js','show':true},
    {'full':'jQuery', 'short':'jq','show':true},
    {'full':'SQL', 'short':'sql','show':true},
    {'full':'CRON Jobs', 'short':'cron','show':true},
    {'full':'Angular', 'short':'angular','show':true},
    {'full':'Charts', 'short':'charts','show':true},
    {'full':'Import/Export Files', 'short':'io','show':true},
    {'full':'Alerts/Emails', 'short':'alerts','show':true},
    {'full':'Full Stack', 'short':'stack','show':true},
    {'full':'Websolr', 'short':'solr','show':true},
    {'full':'Regular Expressions', 'short':'regex','show':true},
    {'full':'PhantomJS', 'short':'phantom','show':true}
  ];
    
  // BrowserDetect to identify Mac
  var BrowserDetect = {
    init: function () {
      // this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
      // this.version = this.searchVersion(navigator.userAgent)
      //   || this.searchVersion(navigator.appVersion)
      //   || "an unknown version";
      this.OS = this.searchString(this.dataOS) || "an unknown OS";
    },
    searchString: function (data) {
      for (var i=0;i<data.length;i++) {
        var dataString = data[i].string;
        var dataProp = data[i].prop;
        this.versionSearchString = data[i].versionSearch || data[i].identity;
        if (dataString) {
          if (dataString.indexOf(data[i].subString) != -1) {
            return data[i].identity;
          }
          else if (dataProp) {
            return data[i].identity;
          }   
        }
      }
    },
    // searchVersion: function (dataString) {
    //   var index = dataString.indexOf(this.versionSearchString);
    //   if (index == -1) return;
    //   return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
    // },
    // dataBrowser: [
    //   {
    //     string: navigator.userAgent,
    //     subString: "Chrome",
    //     identity: "Chrome"
    //   },
    //   {     
    //     string: navigator.userAgent,
    //     subString: "OmniWeb",
    //     versionSearch: "OmniWeb/",
    //     identity: "OmniWeb"
    //   },
    //   {
    //     string: navigator.vendor,
    //     subString: "Apple",
    //     identity: "Safari",
    //     versionSearch: "Version"
    //   },
    //   {
    //     prop: window.opera,
    //     identity: "Opera",
    //     versionSearch: "Version"
    //   },
    //   {
    //     string: navigator.vendor,
    //     subString: "iCab",
    //     identity: "iCab"
    //   },
    //   {
    //     string: navigator.vendor,
    //     subString: "KDE",
    //     identity: "Konqueror"
    //   },
    //   {
    //     string: navigator.userAgent,
    //     subString: "Firefox",
    //     identity: "Firefox"
    //   },
    //   {
    //     string: navigator.vendor,
    //     subString: "Camino",
    //     identity: "Camino"
    //   },
    //   {        // for newer Netscapes (6+)
    //     string: navigator.userAgent,
    //     subString: "Netscape",
    //     identity: "Netscape"
    //   },
    //   {
    //     string: navigator.userAgent,
    //     subString: "MSIE",
    //     identity: "Explorer",
    //     versionSearch: "MSIE"
    //   },
    //   {
    //     string: navigator.userAgent,
    //     subString: "Gecko",
    //     identity: "Mozilla",
    //     versionSearch: "rv"
    //   },
    //   {         // for older Netscapes (4-)
    //     string: navigator.userAgent,
    //     subString: "Mozilla",
    //     identity: "Netscape",
    //     versionSearch: "Mozilla"
    //   }
    // ],
    dataOS : [
      {
        string: navigator.platform,
        subString: "Win",
        identity: "Windows"
      },
      {
        string: navigator.platform,
        subString: "Mac",
        identity: "Mac"
      },
      {
        string: navigator.userAgent,
        subString: "iPhone",
        identity: "iPhone/iPod"
      },
      {
        string: navigator.platform,
        subString: "Linux",
        identity: "Linux"
      } 
    ]
  };
  BrowserDetect.init();
  homeCtrl.browser = BrowserDetect.OS;
  console.log(homeCtrl.browser);


  function init() {
    homeCtrl.gambarizeSetup();

    homeCtrl.setArrays(true);
  } // end of init
  
  init();
  
  /*********************
  *  Private functions *
  * *******************/
  
  // Function to toggle shown skills
  function toggleSkill(changeSkill){
    var skill = $filter('filter')(homeCtrl.skills, function(v){
      return v['short'] == changeSkill;
    });
    skill[0]['show'] = !skill[0]['show'];
  }
  
  // Function to reset variables whenever skill is toggled
  function setArrays(initial = false){
    homeCtrl.activeSkillsArray = $filter('filter')(homeCtrl.skills, function(v){
      if(v['show']){
        return v
      }
    }).map(function(e){
      return e['short'];
    });
    
    // projects that include checked skills
    homeCtrl.showProj = $filter('filter')(homeCtrl.projects, function(v){
      return v['skills'].some(function(s){ 
        return homeCtrl.activeSkillsArray.includes(s)
      });
    });
    
    homeCtrl.showProjLength = homeCtrl.showProj.length > 0;
    
    // if all skills are checked or unchecked, reflect that in allSkillsSelected
    if(homeCtrl.activeSkillsArray.length == homeCtrl.skills.length){
      homeCtrl.allSkillsSelected = true;
    }else{
      homeCtrl.allSkillsSelected = false
    }
    if(!initial && homeCtrl.showProj.length > 0){
      angular.element(document).ready(function(){
        homeCtrl.gambarizeReload();
      });
    }
  }
  
  function selectAll(){
    if(homeCtrl.allSkillsSelected == true){
      angular.forEach(homeCtrl.skills, function(v){
        v['show'] = false;
      });
    }else{
      angular.forEach(homeCtrl.skills, function(v){
        v['show'] = true;
      });
    }
    homeCtrl.setArrays();
  }
  
  function gambarizeSetup(){
    $('#gallery1').ready(function(){
      window.gambarize_instance='';
      
      function gambarizeInit(){
        gambarize_instance0 = new gambarize();
        gambarize_instance0.init({
          content: {
            source: 'a',
            selector: 'gmbz',
            loadInDiv: 'gallery1'
          }
        });
      }
    
      $(window).on('load', gambarizeInit);
    });
  }
  
  function gambarizeReload(){
    // Use evals to set dynamic variables so that new instances of gambarize can be created to avoid errors
    eval("gambarize_instance" + homeCtrl.galleryIndex.toString() + ".uninit();");
    eval("gambarize_instance" + homeCtrl.galleryIndex.toString() + " = '';");
    homeCtrl.galleryIndex++;
    eval("gambarize_instance" + homeCtrl.galleryIndex.toString() + " = new gambarize();");
    eval("gambarize_instance" + homeCtrl.galleryIndex.toString() + ".init({content: {source: 'a', selector: 'gmbz', loadInDiv: 'gallery1' } });");
  }
}]);